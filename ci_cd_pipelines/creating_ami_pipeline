pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE = 'packer-ansible-image'
        DOCKER_TAG = 'latest'
        GIT_REPO = 'https://gitlab.techlab.janrain.net/gitlab-instance-3471579a/docker_ami_aws.git'
        GIT_CREDENTIALS_ID = 'db666873-841e-412f-b7b0-140222b5b6af'
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id'
		AWS_CREDENTIALS_ID = 'jenkins-gitlab-packer-ansible-ami'
		
    }
    stages {
		stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/main']],
                          userRemoteConfigs: [[url: env.GIT_REPO, credentialsId: env.GIT_CREDENTIALS_ID]]])
            }
        }
		stage('Docker Login') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID, passwordVariable: 'DOCKER_TOKEN', usernameVariable: 'DOCKER_USERNAME')]) {
                        env.DOCKER_USERNAME = "$DOCKER_USERNAME"
                        env.DOCKER_PASSWORD = "$DOCKER_TOKEN"
                        sh """
                        echo $DOCKER_TOKEN | docker login ${DOCKER_REGISTRY} -u $DOCKER_USERNAME --password-stdin
                        """
                    }
				}
			}
		}
        stage('Pull from Docker Registry') {
            steps {
                script {
                    sh """
                    docker pull ${DOCKER_REGISTRY}/${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }
        
		stage('Run Docker Container') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkins-gitlab-packer-ansible-ami']]) {
                        
                        shortName = "packer-container-${env.BUILD_NUMBER}" 
                        echo "${shortName}"
                        echo "Container Name: ${shortName}"
                
                        sh """
                        docker run -dit --name ${shortName} \
                          -v /var/lib/jenkins/workspace:/workspace \
                          -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
                          -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
                          ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}
                        """
					}
				}
			}
		}
		stage('Packer Init and Build') {
            steps {
                script {
                   
                    sh """
                    docker exec -i ${shortName} packer init /workspace/docker/packer/aws-ubuntu.pkr.hcl
                    docker exec -i ${shortName} packer build -var "build_number=${env.BUILD_NUMBER}" /workspace/docker/packer/aws-ubuntu.pkr.hcl
                    """
                    
					
                }
            }
		}
		
        
    }    
    
    post {
        always {
			script {
                
                sh """
                docker rm -f ${shortName} || true
                """
            }
            cleanWs()
        }
    }
}
